buildscript {
  dependencies {
    classpath 'ru.vyarus:gradle-java-lib-plugin:1.0.5'
    classpath 'ru.vyarus:gradle-github-info-plugin:1.1.0'
  }
}

plugins {
  id 'pl.allegro.tech.build.axion-release' version '1.8.1'
  id 'jacoco'
  id 'com.github.kt3k.coveralls' version '2.8.1'
}

repositories {
  mavenCentral()
}


scmVersion {
  tag {
    prefix = 'v'
    versionSeparator = ''
  }
}

allprojects {
  version = scmVersion.version

  tasks.withType(Test) {
    testLogging {
      exceptionFormat = 'full'
    }
    afterSuite { descriptor, result ->
      def indicator = "\u001B[32m✓\u001b[0m"
      if (result.failedTestCount > 0) {
        indicator = "\u001B[31m✘\u001b[0m"
      }
      logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
    }
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'ru.vyarus.github-info'
  apply plugin: 'ru.vyarus.java-lib'
  apply plugin: 'jacoco'

  jacoco {
    toolVersion = "0.7.9"
  }

  group = 'com.tqdev.metrics'

  repositories {
    mavenCentral()
  }

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  configurations.compile.transitive = false

  github {
    user 'mevdschee'
    license 'MIT'
    repository 'tqdev-metrics'
  }

  pom {
    description 'TQdev.com\'s Metrics'
    url 'https://tqdev.com/'
    developers {
      developer {
        id "mevdschee"
        name "Maurits van der Schee"
        email "maurits@vdschee.nl"
        roles {
          role "Lead developer"
        }
      }
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.0'
}

def publishedProjects = subprojects.findAll()

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
  description = 'Generates an aggregate report from all subprojects'

  dependsOn(publishedProjects.test)

  additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(publishedProjects.sourceSets.main.output)
  executionData = files(publishedProjects.jacocoTestReport.executionData)

  reports {
    html.enabled = true // human readable
    xml.enabled = true // required by coveralls
  }

  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }
}

coveralls {
  sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'

  dependsOn jacocoRootReport
  onlyIf { System.env.'CI' }
}
